// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(uuid())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  email               String      @unique
  password            String
  name                String
  phone               String?
  avatarUrl           String?
  activeWorkspaceId   String?
  // Google OAuth fields for Drive access
  googleAccessToken   String?
  googleRefreshToken  String?
  googleTokenExpiry   DateTime?
  // Dropbox OAuth fields for file storage
  dropboxAccessToken  String?
  dropboxRefreshToken String?
  dropboxTokenExpiry  DateTime?
  workspaces          Workspace[]
  activeWorkspace     Workspace?  @relation("UserActiveWorkspace", fields: [activeWorkspaceId], references: [id], onDelete: SetNull)
  videos              Video[]
  videoViews          VideoView[]
  comments            Comment[]

  @@map("users")
}

model Workspace {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  name                 String
  userId               String
  isPremium            Boolean  @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeUsers          User[]   @relation("UserActiveWorkspace")
  videos               Video[]

  @@map("workspaces")
}

model Video {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  videoUrl     String
  thumbnailUrl String? // URL to the video thumbnail
  duration     Float? // Duration in seconds
  source       Source? // Source of the video (Dropbox, Local, etc.)
  userId       String
  workspaceId  String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  videoViews   VideoView[]
  comments     Comment[]

  @@map("videos")
}

model VideoView {
  id        String   @id @default(uuid())
  videoId   String
  userId    String?
  sessionId String?  // For tracking unauthenticated users
  viewedAt  DateTime @default(now())
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([videoId, userId, sessionId]) // Ensure uniqueness
  @@index([videoId, viewedAt])
  @@map("video_views")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  videoId   String
  parentId  String? // For replies to comments

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

enum Source {
  Dropbox
  Local
  Bunny
}
